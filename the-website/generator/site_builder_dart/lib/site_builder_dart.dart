import 'dart:convert';
import 'dart:io';
import 'package:path/path.dart' as p;
import 'package:site_builder_dart/head_gen.dart';

main() async {
  checkPresentWorkingDirectory();
  await clearOutPublicFolder();
  await copyCSS();

  final indexFile = File(p.join('..', '..', 'public-site', 'index.html'));

  final html = '''
<!doctype html>
<html lang="sa">
${HeadGen.get(title: 'द्वैतग्रन्थाः')}
<body>
  <header><h1>द्वैतग्रन्थाः</h1></header>

  <main class="content">
    <section class="pure-g">
      <div class="pure-u-1 pure-u-md-1-2">
        <div class="hero">
          <h2>Welcome</h2>
          <p>This page uses <strong>Pure.css</strong> (minimal, responsive CSS module set).</p>
        </div>
      </div>

      <div class="pure-u-1 pure-u-md-1-2">
        <h3>Features</h3>
        <ul class="pure-menu-list">
          <li class="pure-menu-item">Small footprint</li>
          <li class="pure-menu-item">Responsive grid</li>
          <li class="pure-menu-item">Simple components</li>
        </ul>
      </div>
    </section>
  </main>

  <footer>
    <p>&copy; ${DateTime.now().year} — Generated by Dart</p>
  </footer>
</body>
</html>
''';
  indexFile.writeAsStringSync(html, encoding: utf8);
  print('Wrote ${indexFile.path}');
}

void checkPresentWorkingDirectory() {
  final current = Directory.current;
  final sep = Platform.pathSeparator;
  if (!current.path.endsWith('dvaita${sep}the-website${sep}generator${sep}site_builder_dart')) {
    print("Make sure that the present working directory is 'dvaita${sep}the-website${sep}generator${sep}site_builder_dart' to run the builder dart script.");
    print("The present working directory is ${current.path}");
    exit(0);
  }
}

Future<void> copyCSS() async {
  final sourcePath = p.join('lib', 'main.css');
  final destinationDir = Directory(p.join('..', '..', 'public-site'));

  // Ensure destination directory exists
  if (!destinationDir.existsSync()) {
    print("Destination directory 'public-site' does not exist");
    exit(1);
  }

  final destinationPath = p.join(destinationDir.path, 'main.css');

  try {
    await File(sourcePath).copy(destinationPath);
    print('Copied $sourcePath → $destinationPath');
  } catch (e) {
    print('Error copying file: $e');
    exit(1);
  }
}

Future<void> clearOutPublicFolder() async {
  final dir = Directory(p.join('..', '..', 'public-site'));

  if (await dir.exists()) {
    await for (final entity in dir.list(recursive: false)) {
      try {
        if (entity is File) {
          await entity.delete();
        } else if (entity is Directory) {
          await entity.delete(recursive: true);
        }
      } catch (e) {
        print('Error deleting ${entity.path}: $e');
        exit(1);
      }
    }
    print('Cleared contents of ${dir.path}');
  } else {
    print('${dir.path} does not exist.');
    exit(0);
  }
}
